
AVRASM ver. 2.1.52  C:\Users\Michaël\SkyDrive\HanzeHogeschool\Thema 1.3\PROJECT{}\clockassembly\Program codes\AssemblerApplication4\AssemblerApplication4\AssemblerApplication4.asm Fri Apr 17 13:03:56 2015

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Studio 6.0\extensions\Atmel\AVRAssembler\2.1.51.64\AvrAssembler/Include\m32def.inc'
C:\Users\Michaël\SkyDrive\HanzeHogeschool\Thema 1.3\PROJECT{}\clockassembly\Program codes\AssemblerApplication4\AssemblerApplication4\AssemblerApplication4.asm(37): Including file 'C:\Program Files (x86)\Atmel\Atmel Studio 6.0\extensions\Atmel\AVRAssembler\2.1.51.64\AvrAssembler/Include\m32def.inc'
C:\Users\Michaël\SkyDrive\HanzeHogeschool\Thema 1.3\PROJECT{}\clockassembly\Program codes\AssemblerApplication4\AssemblerApplication4\AssemblerApplication4.asm(53): warning: Register r26 already defined by the .DEF directive
                 
                 /*
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32DEF_INC_
                 #define _M32DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega32
                 #pragma AVRPART ADMIN PART_NAME ATmega32
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x02
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler bits
                 .equ	TWPS1	= 1	; TWI Prescaler bits
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x085f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M32DEF_INC_ */
                 
                 
                                                                            
                                                                            
                      000000000          000000000             CCCCCCCCCCCCClllllll                                      kkkkkkkk    
                    00:::::::::00      00:::::::::00        CCC::::::::::::Cl	 l                                      k	   k
                  00:::::::::::::00  00:::::::::::::00    CC:::::::::::::::Cl	 l                                      k	   k 
                 0:::::::000:::::::00:::::::000:::::::0  C:::::CCCCCCCC::::Cl	 l                                      k	   k     
                 0::::::0   0::::::00::::::0   0::::::0 C:::::C       CCCCCC l	 l    ooooooooooo       cccccccccccccccc k	   k    kkkkkkk
                 0:::::0     0:::::00:::::0     0:::::0C:::::C               l	 l  oo			 oo   cc			   c k	   k   k	 k
                 0:::::0     0:::::00:::::0     0:::::0C:::::C               l	 l o			   o c				   c k	   k  k		k
                 0:::::0 000 0:::::00:::::0 000 0:::::0C:::::C               l    l o     ooooo     oc       cccccc     c k     k k     k
                 0:::::0 000 0:::::00:::::0 000 0:::::0C:::::C               l    l o    o     o    oc      c     ccccccc k      k     k 
                 0:::::0     0:::::00:::::0     0:::::0C:::::C               l    l o    o     o    oc     c              k           k 
                 0:::::0     0:::::00:::::0     0:::::0C:::::C               l    l o    o     o    oc     c              k           k
                 0::::::0   0::::::00::::::0   0::::::0 C:::::C       CCCCCC l    l o    o     o    oc      c     ccccccc k      k     k 
                 0:::::::000:::::::00:::::::000:::::::0  C:::::CCCCCCCC::::Cl      lo     ooooo     oc       cccccc     ck      k k     k 
                  00:::::::::::::00  00:::::::::::::00    CC:::::::::::::::Cl      lo               o c                 ck      k  k     k
                    00:::::::::00      00:::::::::00        CCC::::::::::::Cl      l oo           oo   cc               ck      k   k     k
                      000000000          000000000             CCCCCCCCCCCCCllllllll   ooooooooooo       cccccccccccccccckkkkkkkk    kkkkkkk
                 
                 
                 
                  * ClockPorject.asm
                  *
                  * Project: 00C(lock)
                  *
                  *  Created: 25-3-2015 11:51:18
                  *  Author: Ronald Scholten, Michaël van der Veen
                  */ 
                 
                 ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&;
                 ;///////////////////////////////////////////////////////////////////////////////////////////;
                 ;----------------------------------------Directives-----------------------------------------;
                 ;///////////////////////////////////////////////////////////////////////////////////////////;
                 ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&;
                 																							;
                  .include "m32def.inc"																		;
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32DEF_INC_
                 
                 #endif  /* _M32DEF_INC_ */
                 
                 																							;
                  .def hour			= r16																	; <- Set hour   Tens		to register  16
                  .def minute		= r17																	; <- Set minute Tens		to register  17
                  .def second		= r18																	; <- Set second Tens		to register  18
                  																							;
                  .def hourAlarm		= r19																	; <- Set hourAlarm   Tens	to register  19
                  .def minuteAlarm	= r20																	; <- Set minuteAlarm Tens	to register  20
                 																							;
                  .def editLevel		= r21																	; <- Set editLevel			to register 21
                  .def sw0Counter	= r22																	; <- Set sw0Counter			to register 22
                  .def sw1Counter	= r23																	; <- Set sw1Counter			to register 23
                 																							;
                  .def temp			= r24																	; <- Set temp				to register 24
                  .def temp2			= r25																	; <- Set temp2				to register 25
                  .def saveSR		= r12																	; <- Set saveSR				to register 12
                  .def halfSecond	= r26																	; <- Set HalfSecond			to register 26
                  																							;
                  .org 0x0000																				; <- On reset go to program row 0x0000
000000 c00e       rjmp init																					; <- Relative jump to init
                  																							;
                  .org OC1Aaddr																				; <- On interupt go to next line
00000e c025       rjmp CLOCK_CYCLE																			; <- Relative jump to CLOCK_CYCLE
                 ;===========================================================================================;
                 ;----------------------------------------END LABEL------------------------------------------;
                 ;===========================================================================================;
                 
                 
                 
                 
                 
                 ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&;
                 ;///////////////////////////////////////////////////////////////////////////////////////////;
                 ;------------------------------------Initialize data----------------------------------------;
                 ;///////////////////////////////////////////////////////////////////////////////////////////;
                 ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&;
                  init:																						;
                 	;******initiaze starting values*****;													;	=========================================
00000f ef0f      	ldi hour,0xff																			;	= Initialize the registers with values	=
000010 ef1f      	ldi minute,0xff																			;	=										=
000011 ef2f      	ldi second,0xff																			;	= hour,minute,second,hourAlarm,			=
000012 ef3f      	ldi hourAlarm,0xff																		;	= minuteAlarm and halfSecond will 		=
000013 ef4f      	ldi minuteAlarm,0xff																	;	= be set to 0xff						=
000014 e050      	ldi editLevel,0																			;	= editLevel will be set to 0			=
000015 e060      	ldi sw0Counter,0x00																		;	=										=
000016 e070      	ldi sw1Counter,0x00																		;	= sw0Counter, sw1Counter and temp will 	=
000017 e080      	ldi temp,0x00																			;	= be set to 0x00						=
000018 efaf      	ldi halfSecond,0xff																		;	=========================================	
                 																							;	
                 	; set the baud rate, see datahseet p.167												;	
                 	; F_OSC = 11.0592 MHz & baud rate = 19200												;
                 	; to do a 16-bit write, the high byte must be written before the low byte !				;
                 	; for a 16-bit read, the low byte must be read before the high byte !					;
000019 e080      	ldi temp, high(35)																		;
00001a bd80      	out UBRRH, temp																			;
00001b e283      	ldi temp, low(35) ; 19200 baud															;
00001c b989      	out UBRRL, temp																			;
                 	; set frame format : asynchronous, parity disabled, 8 data bits, 1 stop bit				;
00001d e886      	ldi temp, (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0)												;
00001e bd80      	out UCSRC, temp																			;
                 	; enable receiver & transmitter															;
00001f e188      	ldi temp, (1 << RXEN) | (1 << TXEN)														;
000020 b98a      	out UCSRB, temp																			;
                 																							;
                 	; init port																				;
000021 2788      	clr temp ; tmp = oxff																	;
000022 bb8a      	out DDRA, temp ; Port B is output port													;
                 																							;
                 																							;
                 	;******initiaize stack pointer******													;	=============================
000023 e088      	ldi temp, high(RAMEND)																	;	=							=
000024 bf8e      	out SPH, temp																			;	=	   load stackpointer    =
000025 e58f      	ldi temp, low(RAMEND)																	;	=							=
000026 bf8d      	out SPL, temp																			;	=============================
                 																							;
                 	;*initiaize output compare register*													;	=============================
000027 e584      	ldi temp, high(21600)																	;	= setting the kristal to do =
000028 bd8b      	out OCR1AH, temp																		;	= an interupt every half	=
000029 e680      	ldi temp, low(21600)																	;	= second  (1 second = 43200)=
00002a bd8a      	out OCR1AL, temp																		;	=============================
                 																							;
                 																							;	=============================
00002b e08c      	ldi temp, (1<<CS12) | (1 << WGM12)														;	= set prescaler to 256 &	=
00002c bd8e      	out TCCR1B, temp																		;	= set timer in CTC-mode		=
                 																							;	=============================
                 																							;
00002d e180      	ldi temp,(1<<OCIE1A)																	;	=============================
00002e bf89      	out TIMSK, temp																			;	=	  enable interupts		=
                 																							;	=============================
                 																							;
00002f ef8f      	ser temp																				;	=============================
000030 bb87      	out DDRB, temp																			;	= port output, NEED_EDIT	= 
000031 bb88      	out PORTB, temp																			;	=============================
                 																							;
000032 9478      	sei																						; <- enable interupts
                 																							;
                 ;===========================================================================================;
                 ;--------------------------------------------END LABEL--------------------------------------;
                 ;===========================================================================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;--------------Loop label---------------;
                 ;=======================================;
                 ;#######################################;
                 										;	=====================
                 loop:									;	=					=
000033 cfff      	rjmp loop							;	=    infinite loop	=
                 										;	=					=
                 ;=======================================;	=====================
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;###########################################################################################;
                 ;===========================================================================================;
                 ;----------------------------------CLOCK_CYCLE----------------------------------------------;
                 ;===========================================================================================;
                 ;###########################################################################################;
                 																							;
                 CLOCK_CYCLE:																				;	=============================
000034 b6cf      	in saveSR, SREG																			;	= Checks on every clock		=
000035 95a0      	com halfSecond																			;	= * invert halfSecond		=
000036 d00d      	rcall swcheck																			;	= * check if buttons are	=
000037 d01c      	rcall checkEditLevel																	;	= 	pouched					=
000038 3054      	cpi editLevel,4																			;	= * What Edit level its on	=
000039 f420      	brsh incSeconda																			;	= * Check if the clock is	=
00003a 940c 003c 	jmp CLOCK_CYCLE2																		;	= * running.				=
                 CLOCK_CYCLE2:																				;	= * check if the seconds may=
00003c becf      	out SREG, saveSR																		;	=	increment				=	
00003d 9518      	reti																					;	=============================
                 																							;
                 incSeconda:																					;	=============================
00003e 3faf      	cpi halfSecond,0xff																		;	= on every second, increment=
00003f f009      	breq incSecondB																			;	= the seconds				=
000040 cffb      	rjmp CLOCK_CYCLE2																		;	=============================
                 																							;
                 	incSecondB:																				;
000041 d061      		rcall incSecond																		;
000042 940c 003c 		jmp CLOCK_CYCLE2																	;
                 ;===========================================================================================;
                 ;----------------------------------------END LABEL------------------------------------------;
                 ;===========================================================================================;
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;---------Check button Puched-----------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 swcheck:								;	=================================
000044 b389      	in temp, PINA						;	=	Check if one of the buttons =
000045 9580      	com temp							;	= is pouched into.				=
000046 3080      	cpi temp,0x00						;	= If a button is pouched, the	= 
000047 f419      	brne swpouched						;	= program will compair the		=
000048 e060      	ldi sw0Counter,0					;	= results that are made and		=
000049 e070      	ldi sw1Counter,0					;	= will increment the one that	= 
00004a 9508      	ret									;	= is pouched into.				=
                 										;	= the one that isnt pouched		=
                 	swpouched: 							;	= into will be set to 0.		=
00004b fd80      		sbrc temp,PA0					;	=================================
00004c c003      		rjmp sw0pouched					;
00004d fd81      		sbrc temp,PA1					;
00004e c003      		rjmp sw1pouched					;
00004f 9508      		ret								;
                 										;
                 		sw0pouched:						;
000050 9563      		inc sw0Counter					;
000051 9508      		ret								;
                 										;
                 		sw1pouched:						;
000052 9573      		inc sw1Counter					;
000053 9508      		ret								;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;----------Check Edit Level-------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 checkEditLevel:							;	=============================
000054 3050      	cpi editLevel,0						;	= Check on what level the	=
000055 f099      	breq startupa						;	= Program is.				=
000056 3051      	cpi editLevel,1						;	= For every level, there is =
000057 f099      	breq setHoura						;	= an lable to run the		=
000058 3052      	cpi editLevel,2						;	= program.					=
000059 f099      	breq setMinutea						;	=============================
00005a 3053      	cpi editLevel,3						;
00005b f099      	breq setSeconda						;
00005c 3054      	cpi editLevel,4						;
00005d f099      	breq setAlarmStartupa				;
00005e 3055      	cpi editLevel,5						;
00005f f099      	breq setAlarmHoura					;
000060 3056      	cpi editLevel,6						;
000061 f099      	breq setAlarmMinutea				;
000062 3057      	cpi editLevel,7						;
000063 f099      	breq playNoAlarma					;
000064 3058      	cpi editLevel,8						;
000065 f099      	breq playYesAlarma					;
000066 3059      	cpi editLevel,9						;
000067 f498      	brsh playNoAlarmAgaina				;
000068 9508      	ret									;	
                 										;
                 startupa:								;
000069 d067      	rcall startup						;
00006a 9508      	ret									;
                 setHoura:								;
00006b d081      	rcall setHour						;
00006c 9508      	ret									;
                 setMinutea:								;
00006d d0a7      	rcall setMinute						;
00006e 9508      	ret									;
                 setSeconda:								;
00006f d0cd      	rcall setSecond						;
000070 9508      	ret									;
                 setAlarmStartupa:						;
000071 d0f3      	rcall setAlarmStartup				;
000072 9508      	ret									;
                 setAlarmHoura:							;
000073 d109      	rcall setAlarmHour					;
000074 9508      	ret									;
                 setAlarmMinutea:						;
000075 d12f      	rcall setAlarmMinute				;
000076 9508      	ret									;
                 playNoAlarma:							;
000077 d155      	rcall playNoAlarm					;
000078 9508      	ret									;
                 playYesAlarma:							;
000079 d15d      	rcall playYesAlarm					;
00007a 9508      	ret									;
                 playNoAlarmAgaina:						;
00007b d16e      	rcall playNoAlarmAgain				;
00007c 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 
                 ;///////////////////////////////////////;
                 ;=======================================;
                 ;------Check Increment Edit Level-------;
                 ;=======================================;
                 ;///////////////////////////////////////;
                 checkIncEditLevel:						;	=============================
00007d 3072      	cpi sw1Counter,2					;	= Check if the editLevel	=
00007e f009      	breq incEditLevel					;	= needs to be incremented	=
00007f 9508      	ret									;	=============================
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 ;///////////////////////////////////////;
                 ;=======================================;
                 ;---------Increment Edit Level----------;
                 ;=======================================;
                 ;///////////////////////////////////////;
                 incEditLevel:							;	=============================
000080 9553      	inc editLevel						;	= Increments the editlevel	=
000081 9508      	ret									;	=============================
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;///////////////////////////////////////;
                 ;=======================================;
                 ;--------Increment SW0  counter---------;
                 ;=======================================;
                 ;///////////////////////////////////////;
                 incSW0Counter:							;	=============================
000082 9563      	inc sw0Counter						;	= Increments the sw0Counter =
000083 9508      	ret									;	=============================
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;///////////////////////////////////////;
                 ;=======================================;
                 ;----------reset SW0  counter-----------;
                 ;=======================================;
                 ;///////////////////////////////////////;
                 resetSW0Counter:						;	=============================
000084 2766      	clr sw0Counter						;	= Reset the sw0Counter		=
000085 9508      	ret									;	=============================
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 ;///////////////////////////////////////;
                 ;=======================================;
                 ;--------Increment SW1  counter---------;
                 ;=======================================;
                 ;///////////////////////////////////////;
                 incSW1Counter:							;	=============================
000086 9573      	inc sw1Counter						;	= Increment the sw1Counter	=
000087 9508      	ret									;	=============================
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;///////////////////////////////////////;
                 ;=======================================;
                 ;----------reset SW1  counter-----------;
                 ;=======================================;
                 ;///////////////////////////////////////;
                 resetSW1Counter:						;	=============================
000088 2777      	clr sw1Counter						;	= Reset the sw1Counter		=
000089 9508      	ret									;	=============================
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 ;///////////////////////////////////////;
                 ;=======================================;
                 ;--------------Check same---------------;
                 ;=======================================;
                 ;///////////////////////////////////////;
                 checkSame:								;	=============================
00008a 1703      	cp hour,hourAlarm					;	= check if the time is		=
00008b f009      	breq checkSame2						;	= equal to the alarm time	=
00008c 9508      	ret									;	=							=
                 checkSame2:								;	= If the hours are same		=
00008d 1714      	cp minute, minuteAlarm				;	= the program will check	=
00008e f009      	breq checkSame3						;	= the minutes				=
00008f 9508      	ret									;	=							=
                 										;	= if both are the same, the	=
                 checkSame3:								;	= temp register would be	=
000090 e081      	ldi temp,1							;	= set to 1, as for its true	=
000091 9508      	ret									;	=============================
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 ;*******************************************************************************************;
                 ;///////////////////////////////////////////////////////////////////////////////////////////;
                 ;-----------------------------------increment ten second------------------------------------;
                 ;///////////////////////////////////////////////////////////////////////////////////////////;
                 ;*******************************************************************************************;
                 incSecondTens:																				;	=============================
000092 3f2f      	cpi second,0xff																			;	= Increment the seconds with=
000093 f069      	breq setZeroSecond																		;	= steps of 10				=
000094 9523      	inc second																				;	=============================
000095 9523      	inc second																				;
000096 9523      	inc second																				;
000097 9523      	inc second																				;
000098 9523      	inc second																				;
000099 9523      	inc second																				;
00009a 9523      	inc second																				;
00009b 9523      	inc second																				;
00009c 9523      	inc second																				;
00009d 9523      	inc second																				;
                 																							;
00009e 332d      	cpi second,61																			;
00009f f408      	brsh setZeroSecond 																		;
0000a0 9508      	ret																						;
                 																							;
                 ;===========================================================================================;
                 ;---------------------------------------END LABEL-------------------------------------------;
                 ;===========================================================================================;
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;----------Set Zero Second--------------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 setZeroSecond:							;	=============================
0000a1 e021      	ldi second,1						;	= set the seconds back to 0	=
0000a2 9508      	ret									;	=============================
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;----------increment second-------------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incSecond:								;	=============================
0000a3 9523      	inc second							;	= increments the second		=
0000a4 332d      	cpi second,61						;	= if the seconds are higher	=
0000a5 f448      	brsh incMinuteNorm					;	= than register value 61	=
0000a6 9508      	ret									;	= then the program would	=
                 										;	= increment the minute		=
                 ;=======================================;	=============================
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;----------increment Minute-------------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incMinute:								;	=============================
0000a7 3f1f      	cpi minute,0xff						;	= increments the minute		=
0000a8 f021      	breq incHourSetting					;	= if the minutes are higher	=
0000a9 9513      	inc minute							;	= than register value 61	=
0000aa 331d      	cpi minute,61						;	= than the program would	=
0000ab f408      	brsh incHourSetting 				;	= set the minute back to 	=
0000ac 9508      	ret									;	= register value 1			=
                 										;	=							=
                 	incHourSetting:						;	=============================
0000ad e011      		ldi minute,1					;
0000ae 9508      		ret								;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;-------increment Minute Norm-----------;
                 ;///////////////////////////////////////;
                 ;***************************************;	=============================
                 incMinuteNorm:							;	= reset the seconds to 1 and=
0000af 9513      	inc minute							;	= increments the minute		=
0000b0 e021      	ldi second,1						;	= if the minutes are higher =
0000b1 331d      	cpi minute,61						;	= than register value 61	=
0000b2 f478      	brsh incHourNorm 					;	= than the program would	=
0000b3 9508      	ret									;	= increment the hour		=
                 										;	=============================
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;-------increment Minute Alarm----------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incMinuteAlarm:							;	=============================
0000b4 3f4f      	cpi minuteAlarm,0xff				;	= increment the minutes of	=
0000b5 f021      	breq incHourAlarmNorm				;	= the alarm.				=
0000b6 9543      	inc minuteAlarm						;	= if the register value is  =
0000b7 334d      	cpi minuteAlarm,61					;	= same or higher than 61	=
0000b8 f408      	brsh incHourAlarmNorm 				;	= then the value resets to 1=
0000b9 9508      	ret									;	=============================
                 incHourAlarmNorm:						;
0000ba e041      	ldi minuteAlarm,1					;
0000bb 9508      	ret									;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;-----------increment Hour--------------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incHour:								;	=============================
0000bc 3f0f      	cpi hour,0xff						;	= increments the hour		=
0000bd f079      	breq incDayNorm						;	= if the hour register is	=
0000be 9503      	inc hour							;	= same or higher than 25	=
0000bf 3109      	cpi hour,25							;	= then the program reset to	=
0000c0 f460      	brsh incDayNorm						;	= register value 1			=
0000c1 9508      	ret									;	=============================
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;--------increment Hour Norm------------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incHourNorm:							;	=============================
0000c2 9503      	inc hour							;	= increment the hour and	=
0000c3 e011      	ldi minute,1						;	= reset the minutes to value=
0000c4 3109      	cpi hour,25							;	= one.						=
0000c5 f438      	brsh incDayNorm 					;	= if the hour is same or	=
0000c6 9508      	ret									;	= greater than 25, reset the=
                 										;	= hours back to 1.			=
                 ;=======================================;	=============================
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;------increment HourAlarm Norm---------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incHourAlarm:							;	=============================
0000c7 3f3f      	cpi hourAlarm,0xff					;	= increment the hour alarm	=
0000c8 f031      	breq incDayAlarmNorm				;	= and if its same or greater=
0000c9 9533      	inc hourAlarm						;	= than 25, reset the value	=
0000ca 3139      	cpi hourAlarm,25					;	= back to 1.				=
0000cb f418      	brsh incDayAlarmNorm 				;	=============================
0000cc 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;------------increment Day--------------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incDayNorm:								;	=============================
0000cd e001      	ldi hour,1							;	= reset the hour back to 1	=
0000ce 9508      	ret									;	=							=
                 incDayAlarmNorm:						;	=							=
0000cf e031      	ldi hourAlarm,1						;	= reset the hour alarm to 1	=
0000d0 9508      	ret									;	=============================
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;###############################################################################;
                 ;===============================================================================;
                 ;----------------------------------Start up-------------------------------------;
                 ;===============================================================================;
                 ;###############################################################################;
                 																				;
                 startup:																		;	=============================
0000d1 d012      	rcall startup1																;	= Makes the hour,minute,	=
0000d2 d014      	rcall startup2																;	= seconds blink every half	=
0000d3 d016      	rcall startup3																;	= second.					=
0000d4 d15d      	rcall displayNoAlarm														;	=============================
0000d5 9500      	com hour																	; 
0000d6 9510      	com minute																	;
0000d7 9520      	com second																	;
0000d8 dfa4      	rcall checkIncEditLevel														;
0000d9 9508      	ret																			;
                 																				;
                 displayNull2:																	; <- display two times nothing
0000da 940e 01f6 	call displayNull															;
0000dc 940e 01f6 	call displayNull															;
0000de 9508      	ret																			;
                 displayZero2:																	; <- display two times a Zero
0000df 940e 01f9 	call displayZero															;
0000e1 940e 01f9 	call displayZero															;
0000e3 9508      	ret																			;
                 																				;
                 	startup1:																	;
0000e4 3f0f      		cpi hour,0xff															;
0000e5 f3a1      		breq displayNull2														;
0000e6 f7c1      		brne displayZero2														;
                 																				;
                 	startup2:																	;
0000e7 3f1f      		cpi minute,0xff															;
0000e8 f389      		breq displayNull2														;
0000e9 f7a9      		brne displayZero2														;
                 																				;
                 	startup3:																	;
0000ea 3f2f      		cpi second, 0xff														;
0000eb f371      		breq displayNull2														;
0000ec f791      		brne displayZero2														;
                 ;===============================================================================;
                 ;------------------------------------END LABEL----------------------------------;
                 ;===============================================================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;--------------Set Hour-----------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 setHour:								;	=============================
0000ed df8f      	rcall checkIncEditLevel				;	= blinks the hour* ones		= 
0000ee d005      	rcall updateHour					;	= every half second when	=
0000ef d00b      	rcall setHour1						;	= there are no buttons		=
                 										;	= pouched.					=
0000f0 dfee      	rcall displayZero2					;	= when sw0Counter is higher	=
0000f1 dfed      	rcall displayZero2					;	= than 2, then the hour*	=
0000f2 d13f      	rcall displayNoAlarm				;	= would increment.			=
0000f3 9508      	ret									;	=============================
                 										;
                 	updateHour:							;
0000f4 3062      	cpi	sw0Counter,2					;
0000f5 f418      	brsh incHour2						;
0000f6 3052      	cpi editLevel,2						;
0000f7 f0b9      	breq checkNullHour					;
0000f8 9508      	ret									;
                 	 incHour2:							;
0000f9 dfc2      		rcall incHour					;
0000fa 9508      		ret								;
                 										;
                 	setHour1:							;
                 										;
0000fb 3f0f      		cpi hour,0xff					;
0000fc f051      		breq displayNullHour2inv		;
0000fd 3000      		cpi hour,0x00					;
0000fe f061      		breq displayZeroHour2inv		;
0000ff 30a0      		cpi halfSecond,0x00				;
000100 f011      		breq checkBlinkHour				;
                 										;
000101 d151      		rcall displayHour				;
000102 9508      		ret								;
                 										;
                 		checkBlinkHour:					;
000103 fd80      			sbrc temp,PA0				;
000104 c14e      			rjmp displayHour			;
000105 dfd4      			rcall displayNull2			;
000106 9508      			ret							;
                 										;
                 	displayNullHour2inv:				;
000107 9500      		com hour						;
000108 940e 00da 		call displayNull2				;
00010a 9508      		ret								;
                 	displayZeroHour2inv:				;
00010b 9500      		com hour						;
00010c 940e 00df 		call displayZero2				;
00010e 9508      		ret								;
                 										;
                 		checkNullHour:					;
00010f 3000      			cpi hour,0x00				;
000110 f019      			breq setHourNull			;
000111 3f0f      			cpi hour,0xff				;
000112 f009      			breq setHourNull			;
000113 9508      			ret							;
                 										;
                 		setHourNull:					;
000114 e001      			ldi hour,1					;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;-------------Set Minute----------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 setMinute:								;
000115 df67      	rcall checkIncEditLevel				;
000116 d005      	rcall updateMinute					;
000117 d13b      	rcall displayHour					;
000118 d008      	rcall setMinute1					;
000119 dfc5      	rcall displayZero2					;
00011a d117      	rcall displayNoAlarm
00011b 9508      	ret
                 	
                 	updateMinute:
00011c 3062      	cpi	sw0Counter,2					;
00011d f478      	brsh incMinute2						;
00011e 3053      	cpi editLevel,3
00011f f0b9      	breq checkNullMinute
000120 9508      	ret									;
                 
                 	setMinute1:
000121 3f1f      		cpi minute,0xff					;
000122 f061      		breq displayNullMinute2inv		;
000123 3010      		cpi minute,0x00					;
000124 f071      		breq displayZeroMinute2inv		;
000125 3faf      		cpi halfSecond, 0xff
000126 f011      		breq checkBlinkMinute
000127 d12e      		rcall displayMinute				;
000128 9508      		ret
                 
                 		checkBlinkMinute:
000129 fd80      			sbrc temp,PA0
00012a c12b      			rjmp displayMinute
00012b dfae      			rcall displayNull2
00012c 9508      			ret
                 
                 	incMinute2:
00012d df79      		rcall incMinute
00012e 9508      		ret
                 	
                 	displayNullMinute2inv:
00012f 9510      		com minute
000130 940e 00da 		call displayNull2
000132 9508      		ret
                 	displayZeroMinute2inv:
000133 9510      		com minute
000134 940e 00df 		call displayZero2
000136 9508      		ret
                 
                 		checkNullMinute:
000137 3010      			cpi minute,0x00
000138 f019      			breq setMinuteNull
000139 3f1f      			cpi minute,0xff
00013a f009      			breq setMinuteNull
00013b 9508      			ret
                 
                 		setMinuteNull:
00013c e011      			ldi Minute,1
                 	
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;-------------Set second----------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 setSecond:								;
00013d df3f      	rcall checkIncEditLevel				;
00013e d005      	rcall updateSecond					;
00013f d113      	rcall displayHour					;
000140 d115      	rcall displayMinute					;
000141 d007      	rcall setSecond1					;
000142 d0ef      	rcall displayNoAlarm				;
000143 9508      	ret									;
                 										;
                 	updateSecond:						;
000144 3062      	cpi	sw0Counter,2					;
000145 f478      	brsh incSecondTens2					;
000146 3054      	cpi editLevel,4						;
000147 f0b9      	breq checkNullSecond				;
000148 9508      	ret									;
                 										;
                 	setSecond1:							;
000149 3f2f      		cpi second,0xff					;
00014a f061      		breq displayNullSecond2inv		;
00014b 3020      		cpi second,0x00					;
00014c f071      		breq displayZeroSecond2inv		;
00014d 3faf      		cpi halfSecond,0xff				;
00014e f011      		breq checkBlinkSecond			;
00014f d109      		rcall displaySecond				;
000150 9508      		ret								;
                 										;
                 		checkBlinkSecond:				;
000151 fd80      			sbrc temp,PA0				;
000152 c106      			rjmp displaySecond			;
000153 df86      			rcall displayNull2			;
000154 9508      			ret							;
                 										;
                 	incSecondTens2:						;
000155 df3c      		rcall incSecondTens				;
000156 9508      		ret								;
                 										;
                 		displayNullSecond2inv:			;
000157 9520      		com second						;
000158 940e 00da 		call displayNull2				;
00015a 9508      		ret								;
                 	displayZeroSecond2inv:				;
00015b 9520      		com second						;
00015c 940e 00df 		call displayZero2				;
00015e 9508      		ret								;
                 										;
                 		checkNullSecond:				;
00015f 3020      			cpi second,0x00				;
000160 f019      			breq setSecondNull			;
000161 3f2f      			cpi second,0xff				;
000162 f009      			breq setSecondNull			;
000163 9508      			ret							;
                 										;
                 		setSecondNull:					;
000164 e021      			ldi second,1				;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;------------setup Alarm----------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 setAlarmStartup:						;
000165 d007      	rcall alarmSetup1
000166 d009      	rcall alarmSetup2
000167 df72      	rcall displayNull2
000168 d0c6      	rcall displaySetAlarm
000169 9530      	com hourAlarm						;
00016a 9540      	com minuteAlarm						;
00016b df11      	rcall checkIncEditLevel
00016c 9508      	ret
                 	
                 	
                 	alarmSetup1:
00016d 3f3f      		cpi hourAlarm,0xff				;
00016e f021      		breq displayNull3				;
00016f f441      		brne displayZero3
                 
                 	Alarmsetup2:
000170 3f4f      		cpi minuteAlarm,0xff			;
000171 f009      		breq displayNull3				;
000172 f429      		brne displayZero3				;
                 
                 		displayNull3:
000173 940e 01f6 			call displayNull
000175 940e 01f6 			call displayNull
000177 9508      			ret
                 		displayZero3:
000178 940e 01f9 			call displayZero
00017a 940e 01f9 			call displayZero
00017c 9508      			ret	
                 	
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;-----------Set Hour Alarm--------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 setAlarmHour:
00017d deff      	rcall checkIncEditLevel
00017e d005      	rcall updateAlarmHour
00017f d00f      	rcall setAlarmHour1
000180 df5e      	rcall displayZero2					;
000181 df58      	rcall displayNull2					;
000182 d0ac      	rcall displaySetAlarm				;
000183 9508      	ret
                 		
                 	updateAlarmHour:			;
000184 3062      	cpi	sw0Counter,2					;
000185 f418      	brsh incHourAlarm2						;
000186 3056      	cpi editLevel,6
000187 f0b9      	breq checkNullAlarmHour
000188 9508      	ret									;
                 	 incHourAlarm2:
000189 df3d      		rcall incHourAlarm
00018a 9508      		ret
                 
                 		checkBlinkAlarmHour:
00018b fd80      			sbrc temp,PA0
00018c c0cf      			rjmp displayHourAlarm
00018d df4c      			rcall displayNull2
00018e 9508      			ret
                 
                 	setAlarmHour1:
                 		
00018f 3f3f      		cpi hourAlarm,0xff					;
000190 f031      		breq displayNullHourAlarm2inv		;
000191 3030      		cpi hourAlarm,0x00					;
000192 f041      		breq displayZeroHourAlarm2inv		;	
000193 3faf      		cpi halfSecond,0xff
000194 f3b1      		breq checkBlinkAlarmHour				
000195 d0c6      		rcall displayHourAlarm				;
000196 9508      		ret
                 
                 	displayNullHourAlarm2inv:
000197 9530      		com hourAlarm
000198 940e 00da 		call displayNull2
00019a 9508      		ret
                 	displayZeroHourAlarm2inv:
00019b 9530      		com hourAlarm
00019c 940e 00df 		call displayZero2
00019e 9508      		ret
                 
                 		checkNullAlarmHour:
00019f 3030      			cpi hourAlarm,0x00
0001a0 f019      			breq setHourAlarmNull
0001a1 3f3f      			cpi hourAlarm,0xff
0001a2 f009      			breq setHourAlarmNull
0001a3 9508      			ret
                 
                 		setHourAlarmNull:
0001a4 e031      			ldi hourAlarm,1
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;----------Set Minute Alarm-------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 setAlarmMinute:							;
0001a5 ded7      	rcall checkIncEditLevel
0001a6 d005      	rcall updateAlarmMinute
0001a7 d0b4      	rcall displayHourAlarm				;
0001a8 d008      	rcall setMinuteAlarm1
0001a9 df30      	rcall displayNull2
0001aa d084      	rcall displaySetAlarm
0001ab 9508      	ret
                 
                 	updateAlarmMinute:
0001ac 3061      	cpi	sw0Counter,1					;
0001ad f478      	brsh incMinuteAlarm2						;
0001ae 3057      	cpi editLevel,7
0001af f0b9      	breq checkNullAlarmMinute				;
0001b0 9508      	ret									;
                 
                 	setMinuteAlarm1:
0001b1 3f4f      		cpi minuteAlarm,0xff					;
0001b2 f061      		breq displayNullMinuteAlarm2inv				;
0001b3 3040      		cpi minuteAlarm,0x00					;
0001b4 f071      		breq displayZeroMinuteAlarm2inv					;
0001b5 3faf      		cpi halfSecond,0xff
0001b6 f011      		breq checkBlinkAlarmMinute
0001b7 d0a7      		rcall displayMinuteAlarm				;
0001b8 9508      		ret
                 
                 		checkBlinkAlarmMinute:
0001b9 fd80      			sbrc temp,PA0
0001ba c0a4      			rjmp displayMinuteAlarm
0001bb df1e      			rcall displayNull2
0001bc 9508      			ret
                 
                 	incMinuteAlarm2:
0001bd def6      		rcall incMinuteAlarm
0001be 9508      		ret
                 	
                 	displayNullMinuteAlarm2inv:
0001bf 9540      		com minuteAlarm
0001c0 940e 00da 		call displayNull2
0001c2 9508      		ret
                 	displayZeroMinuteAlarm2inv:
0001c3 9540      		com minuteAlarm
0001c4 940e 00df 		call displayZero2
0001c6 9508      		ret
                 
                 		checkNullAlarmMinute:
0001c7 3040      			cpi minuteAlarm,0x00
0001c8 f019      			breq setminuteAlarmNull
0001c9 3f4f      			cpi minuteAlarm,0xff
0001ca f009      			breq setminuteAlarmNull
0001cb 9508      			ret
                 
                 		setminuteAlarmNull:
0001cc e041      			ldi minuteAlarm,1
                 	
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;------------Play No Alarm--------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 playNoAlarm:							;
0001cd deaf      	rcall checkIncEditLevel				;
0001ce 3061      	cpi	sw0Counter,1					;
0001cf f408      	brsh showAlarm2						;
0001d0 f411      	brne showTime2						;
                 
                 	showAlarm2:
0001d1 d01f      		rcall showAlarm
0001d2 c002      		rjmp playNoAlarm2
                 
                 	showTime2:
0001d3 d019      		rcall showTime
0001d4 c000      		rjmp playNoAlarm2
                 	playNoAlarm2:
0001d5 d05c      	rcall displayNoAlarm				;
0001d6 9508      	ret									;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;------------Play Yes Alarm--------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 playYesAlarm:							;
0001d7 dea5      	rcall checkIncEditLevel				;
0001d8 d002      	rcall checkDisplay
0001d9 d004      	rcall checkAlarmSound
0001da 9508      	ret
                 
                 	checkDisplay:
0001db 3061      	cpi	sw0Counter,1					;
0001dc f4a0      	brsh showAlarm						;
0001dd f479      	brne showTime
                 	
                 	checkAlarmSound:			;				;
0001de e080      	ldi temp,0x00						;
0001df 940e 008a 	call checkSame
0001e1 3080      	cpi temp,0x00
0001e2 f009      	breq displayYesAlarm2
0001e3 f419      	brne displayBuzzer2
                 							;
                 displayYesAlarm2:
0001e4 940e 022c 	call displayYesAlarm
0001e6 9508      	ret
                 displayBuzzer2:
0001e7 940e 0238 	call displayBuzzer
0001e9 9508      	ret
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;------------Play No Alarm--------------;
                 ;=======================================;
                 ;#######################################;
                 playNoAlarmAgain:
0001ea e057      	ldi editLevel,7
0001eb dfe1      	rcall playNoAlarm
0001ec 9508      	ret
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;--------------Show Time----------------;
                 ;=======================================;
                 ;#######################################;
                 showTime:								;
0001ed d065      	rcall displayHour					;
0001ee d067      	rcall displayMinute					;
0001ef d069      	rcall displaySecond					;
0001f0 9508      	ret									;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;--------------Show Alarm----------------;
                 ;=======================================;
                 ;#######################################;
                 showAlarm:								;
0001f1 d06a      	rcall displayHourAlarm				;
0001f2 d06c      	rcall displayMinuteAlarm				;
0001f3 d002      	rcall displayNull					;
0001f4 d001      	rcall displayNull					;
0001f5 9508      	ret									;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 displayNull:
0001f6 e090      	ldi temp2, 0x00
0001f7 d06a      	rcall SEND_BYTE
0001f8 9508      	ret
                 displayZero:
0001f9 e797      	ldi temp2, 0x77
0001fa d067      	rcall SEND_BYTE
0001fb 9508      	ret
                 displayOne:
0001fc e294      	ldi temp2, 0x24
0001fd d064      	rcall SEND_BYTE
0001fe 9508      	ret
                 displayTwo:
0001ff e59d      	ldi temp2, 0x5D
000200 d061      	rcall SEND_BYTE
000201 9508      	ret
                 displayThree:
000202 e69d      	ldi temp2, 0x6D
000203 d05e      	rcall SEND_BYTE
000204 9508      	ret
                 displayFour:
000205 e29e      	ldi temp2, 0x2E
000206 d05b      	rcall SEND_BYTE
000207 9508      	ret
                 displayFive:
000208 e69b      	ldi temp2, 0x6B
000209 d058      	rcall SEND_BYTE
00020a 9508      	ret
                 displaySix:
00020b e79b      	ldi temp2, 0x7B
00020c d055      	rcall SEND_BYTE
00020d 9508      	ret
                 displaySeven:
00020e e295      	ldi temp2, 0x25
00020f d052      	rcall SEND_BYTE
000210 9508      	ret
                 displayEight:
000211 e79f      	ldi temp2, 0x7F
000212 d04f      	rcall SEND_BYTE
000213 9508      	ret
                 displayNine:
000214 e69f      	ldi temp2, 0x6F
000215 d04c      	rcall SEND_BYTE
000216 9508      	ret
                 
                 displayNumber:
000217 3090      	cpi temp2, 0x00
000218 f301      	breq displayZero
                 	
000219 3091      	cpi temp2, 0x01
00021a f309      	breq displayOne
                 
00021b 3092      	cpi temp2, 0x02
00021c f311      	breq displayTwo
                 
00021d 3093      	cpi temp2, 0x03
00021e f319      	breq displayThree
                 
00021f 3094      	cpi temp2, 0x04
000220 f321      	breq displayFour
                 
000221 3095      	cpi temp2, 0x05
000222 f329      	breq displayFive
                 
000223 3096      	cpi temp2, 0x06
000224 f331      	breq displaySix
                 
000225 3097      	cpi temp2, 0x07
000226 f339      	breq displaySeven
                 
000227 3098      	cpi temp2, 0x08
000228 f341      	breq displayEight
                 
000229 3099      	cpi temp2, 0x09
00022a f349      	breq displayNine
                 
00022b 9508      	ret
                 
                 
                 displayYesAlarm:
00022c e097      	ldi temp2, 0b00000111
00022d d034      	rcall SEND_BYTE
00022e 9508      	ret
                 displaySetAlarm:
00022f e095      	ldi temp2, 0b00000101
000230 d031      	rcall SEND_BYTE
000231 9508      	ret
                 displayNoAlarm:
000232 e096      	ldi temp2, 0b00000110
000233 d02e      	rcall SEND_BYTE
000234 9508      	ret
                 displayNoPointer:
000235 e090      	ldi temp2, 0b00000000
000236 d02b      	rcall SEND_BYTE
000237 9508      	ret
                 displayBuzzer:
000238 e09f      	ldi temp2, 0b00001111
000239 d028      	rcall SEND_BYTE
00023a 9508      	ret
                 displayNoPointerAlarm:
00023b e091      	ldi temp2, 0b00000001
00023c d025      	rcall SEND_BYTE
00023d 9508      	ret
                 
                 splitByte:    ;xxxxx
00023e 2799      	clr temp2
00023f 958a      	dec temp
000240 c000      	rjmp splitByte2
                 
                 	splitByte2:
000241 308a      	cpi temp, 10
000242 f408      	brsh splitByteYes
000243 f038      	brlo splitByteNo
                 
                 	splitByteYes:
000244 308a      		cpi temp,10
000245 f408      		brsh start_split
000246 f040      		brlo sendtens
                 
                 		start_split:
000247 508a      			subi temp, 10
000248 9593      			inc temp2
000249 cffa      			rjmp splitByteYes
                 	
00024a 9508      	ret
                 
                 	splitByteNo:
00024b dfad      		rcall displayZero
00024c 2f98      		mov temp2, temp
00024d dfc9      		rcall displayNumber
00024e 9508      		ret
                 
                 	sendtens:
00024f dfc7      		rcall displayNumber
000250 2f98      		mov temp2, temp
000251 dfc5      		rcall displayNumber
000252 9508      		ret
                 		
                 
                 displayHour:
000253 2f80      	mov temp, hour
000254 cfe9      	rjmp splitByte
                 
000255 9508      	ret
                 
                 displayMinute:
000256 2f81      	mov temp, minute
000257 cfe6      	rjmp splitByte
                 	
000258 9508      	ret
                 
                 displaySecond:
000259 2f82      	mov temp, second
00025a cfe3      	rjmp splitByte
                 	
00025b 9508      	ret
                 
                 displayHourAlarm:
00025c 2f83      	mov temp, hourAlarm
00025d cfe0      	rjmp splitByte
                 
00025e 9508      	ret
                 
                 displayMinuteAlarm:
00025f 2f84      	mov temp, minuteAlarm
000260 cfdd      	rjmp splitByte
                 	
000261 9508      	ret
                 
                 SEND_BYTE:
000262 9b5d      	sbis UCSRA, UDRE
000263 cffe      	rjmp SEND_BYTE
000264 b99c      	out UDR, temp2


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   2 r13:   0 r14:   0 r15:   0 
r16:  18 r17:  19 r18:  27 r19:  16 r20:  16 r21:  19 r22:  12 r23:   6 
r24:  50 r25:  32 r26:   8 r27:   0 r28:   0 r29:   0 r30:   0 r31:   0 
x  :   0 y  :   0 z  :   0 
Registers used: 12 out of 35 (34.3%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  64 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 brlt  :   0 brmi  :   0 
brne  :   9 brpl  :   0 brsh  :  19 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  21 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   4 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :  17 cp    :   2 cpc   :   0 
cpi   :  82 cpse  :   0 dec   :   1 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 inc   :  23 jmp   :   2 
ld    :   0 ldd   :   0 ldi   :  54 lds   :   0 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   7 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  15 pop   :   0 
push  :   0 rcall : 104 ret   : 117 reti  :   1 rjmp  :  21 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   1 
sbiw  :   0 sbr   :   0 sbrc  :   7 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   1 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   0 subi  :   1 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 25 out of 113 (22.1%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004cc   1202      0   1202   32768   3.7%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 1 warnings
