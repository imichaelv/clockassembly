
AVRASM ver. 2.1.52  C:\Users\Michaël\SkyDrive\HanzeHogeschool\Thema 1.3\PROJECT{}\clockassembly\Program codes\AssemblerApplication4\AssemblerApplication4\AssemblerApplication4.asm Fri Apr 10 13:50:30 2015

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Studio 6.0\extensions\Atmel\AVRAssembler\2.1.51.64\AvrAssembler/Include\m32def.inc'
C:\Users\Michaël\SkyDrive\HanzeHogeschool\Thema 1.3\PROJECT{}\clockassembly\Program codes\AssemblerApplication4\AssemblerApplication4\AssemblerApplication4.asm(8): Including file 'C:\Program Files (x86)\Atmel\Atmel Studio 6.0\extensions\Atmel\AVRAssembler\2.1.51.64\AvrAssembler/Include\m32def.inc'
                 
                 /*
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32DEF_INC_
                 #define _M32DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega32
                 #pragma AVRPART ADMIN PART_NAME ATmega32
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x02
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler bits
                 .equ	TWPS1	= 1	; TWI Prescaler bits
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x085f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M32DEF_INC_ */
                 
                 
                  * ClockPorject.asm
                  *
                  *  Created: 25-3-2015 11:51:18
                  *  Author: Ronald Scholten, Michaël van der Veen
                  */ 
                 
                  .include "m32def.inc"					;
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32DEF_INC_
                 
                 #endif  /* _M32DEF_INC_ */
                 
                  
                  .def hour			= r16				; Set hour   Tens to register  1
                  .def minute		= r17				; Set minute Tens to register  3
                  .def second		= r18				; Set second Tens to register  5
                  
                  .def hourAlarm		= r19				; Set hourAlarm   Tens to register  7
                  .def minuteAlarm	= r20				; Set minuteAlarm Tens to register  9
                 
                  .def editLevel		= r21				; Set editLevel   to register 11
                  .def sw0Counter	= r22				; Set sw0Counter  to register 12
                  .def sw1Counter	= r23				; Set sw1Counter  to register 13
                 
                 
                 
                  .def temp			= r24				; Set temp   to register 16
                  .def temp2			= r25				; Set temp2  to register 25
                  .def saveSR		= r12				; Set saveSR to register 17
                 
                 
                 
                  .org 0x0000							;
000000 c00e       rjmp init								;
                 
                 
                 
                  .org OC1Aaddr							;
00000e c022       rjmp CLOCK_CYCLE						;
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&;
                 ;////////////////////////////////////////////////////////////////////////////////////////;
                 ;-----------------------------------Initialize data--------------------------------------;
                 ;////////////////////////////////////////////////////////////////////////////////////////;
                 ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&;
                  init:									;
                 	;******initiaze starting values*****;
00000f ef0f      	ldi hour,0xff
000010 ef1f      	ldi minute,0xff
000011 ef2f      	ldi second,0xff
000012 ef3f      	ldi hourAlarm,0xff
000013 ef4f      	ldi minuteAlarm,0xff
000014 e050      	ldi editLevel,0
000015 e060      	ldi sw0Counter,0x00
000016 e070      	ldi sw1Counter,0x00
000017 e080      	ldi temp,0x00
                 
                 	
                 	// Init UART
000018 2788      	clr temp;
000019 bd80      	out UBRRH, temp
00001a e283      	ldi temp, 35 ; 19200 baud
00001b b989      	out UBRRL, temp
                 	; set frame format : asynchronous, parity disabled, 8 data bits, 1 stop bit
00001c e886      	ldi temp, (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0)
00001d bd80      	out UCSRC, temp
                 	; enable receiver & transmitter
00001e e188      	ldi temp, (1 << RXEN) | (1 << TXEN)
00001f b98a      	out UCSRB, temp			
                 					
                 										;
                 	;******initiaize stack pointer******;	=============================
000020 e088      	ldi temp, high(RAMEND)				;	=							=
000021 bf8e      	out SPH, temp						;	=	   load stackpointer    =
000022 e58f      	ldi temp, low(RAMEND)				;	=							=
000023 bf8d      	out SPL, temp						;	=============================
                 										;
                 	;*initiaize output compare register*;	=============================
000024 e584      	ldi temp, high(21600)				;	= setting the kristal to do =
000025 bd8b      	out OCR1AH, temp					;	= an interupt every half	=
000026 e680      	ldi temp, low(21600)				;	= second  (1 second = 43200)=
000027 bd8a      	out OCR1AL, temp					;	=============================
                 										;
                 										;	=============================
000028 e08c      	ldi temp, (1<<CS12) | (1 << WGM12)	;	= set prescaler to 256 &	=
000029 bd8e      	out TCCR1B, temp					;	= set timer in CTC-mode		=
                 										;	=============================
                 										;
00002a e180      	ldi temp,(1<<OCIE1A)				;	=============================
00002b bf89      	out TIMSK, temp						;	=	  enable interupts		=
                 										;	=============================
                 										;
00002c ef8f      	ser temp							;	=============================
00002d bb87      	out DDRB, temp						;	= port output, NEED_EDIT	= 
00002e bb88      	out PORTB, temp						;	=============================
                 										;
00002f 9478      	sei									;	= enable interupts			= 
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;--------------Loop label---------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 loop:									;
000030 cfff      	rjmp loop							;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;-------------CLOCK_CYCLE---------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 CLOCK_CYCLE:							;	=============================
000031 b6cf      	in saveSR, SREG						;	= Checks on every clock		=
000032 d009      	rcall checkEditLevel				;	= * What Edit level its on	=
000033 3054      	cpi editLevel,4						;	= * Check if the clock is	=
000034 f420      	brsh incSeconda
000035 940c 0037 	jmp CLOCK_CYCLE2
                 CLOCK_CYCLE2:										;	=	running.				=
000037 becf      	out SREG, saveSR					;	=							=	
000038 9518      	reti								;	=============================
                 
                 incSeconda:
000039 d057      	rcall incSecond
00003a 940c 0037 	jmp CLOCK_CYCLE2										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;----------Check Edit Level-------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 checkEditLevel:							;	=============================
00003c 3050      	cpi editLevel,0
00003d f099      	breq startupa
00003e 3051      	cpi editLevel,1
00003f f099      	breq setHoura
000040 3052      	cpi editLevel,2
000041 f099      	breq setMinutea
000042 3053      	cpi editLevel,3
000043 f099      	breq setSeconda
000044 3054      	cpi editLevel,4
000045 f099      	breq setAlarmStartupa
000046 3055      	cpi editLevel,5
000047 f099      	breq setAlarmHoura
000048 3056      	cpi editLevel,6
000049 f099      	breq setAlarmMinutea
00004a 3057      	cpi editLevel,7
00004b f099      	breq playNoAlarma
00004c 3058      	cpi editLevel,8
00004d f099      	breq playYesAlarma
00004e 3059      	cpi editLevel,9
00004f f099      	breq playNoAlarmAgaina
000050 9508      	ret									;	=============================
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 startupa:
000051 d063      	rcall startup
000052 9508      	ret
                 setHoura:
000053 d07d      	rcall setHour
000054 9508      	ret
                 setMinutea:
000055 d095      	rcall setMinute
000056 9508      	ret
                 setSeconda:
000057 d0ab      	rcall setSecond
000058 9508      	ret
                 setAlarmStartupa:
000059 d0c2      	rcall setAlarmStartup
00005a 9508      	ret
                 setAlarmHoura:
00005b d0d8      	rcall setAlarmHour
00005c 9508      	ret
                 setAlarmMinutea:
00005d d0f0      	rcall setAlarmMinute
00005e 9508      	ret
                 playNoAlarma:
00005f d106      	rcall playNoAlarm
000060 9508      	ret
                 playYesAlarma:
000061 d10a      	rcall playYesAlarm
000062 9508      	ret
                 playNoAlarmAgaina:
000063 dfff      	rcall playNoAlarmAgaina
000064 9508      	ret
                 
                 
                 
                 
                 
                 
                 
                 ;///////////////////////////////////////;
                 ;=======================================;
                 ;------Check Increment Edit Level-------;
                 ;=======================================;
                 ;///////////////////////////////////////;
                 checkIncEditLevel:						;
000065 3076      	cpi sw1Counter,6					;
000066 f438      	brsh incEditLevel					;
000067 3070      	cpi sw1Counter,0x00					;
000068 f061      	breq incSW1Counter					;
000069 f469      	brne resetSW1Counter				;
00006a 3062      	cpi sw0Counter,2					;
00006b f428      	brsh incSW0Counter					;
00006c f031      	breq resetSW0Counter				;
00006d 9508      	ret									;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 ;///////////////////////////////////////;
                 ;=======================================;
                 ;---------Increment Edit Level----------;
                 ;=======================================;
                 ;///////////////////////////////////////;
                 incEditLevel:							;
00006e 9553      	inc editLevel						;
00006f 2777      	clr sw1Counter						;
000070 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;///////////////////////////////////////;
                 ;=======================================;
                 ;--------Increment SW0  counter---------;
                 ;=======================================;
                 ;///////////////////////////////////////;
                 incSW0Counter:							;
000071 9563      	inc sw0Counter						;
000072 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;///////////////////////////////////////;
                 ;=======================================;
                 ;----------reset SW0  counter-----------;
                 ;=======================================;
                 ;///////////////////////////////////////;
                 resetSW0Counter:						;
000073 2766      	clr sw0Counter						;
000074 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 ;///////////////////////////////////////;
                 ;=======================================;
                 ;--------Increment SW1  counter---------;
                 ;=======================================;
                 ;///////////////////////////////////////;
                 incSW1Counter:							;
000075 9573      	inc sw1Counter						;
000076 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;///////////////////////////////////////;
                 ;=======================================;
                 ;----------reset SW1  counter-----------;
                 ;=======================================;
                 ;///////////////////////////////////////;
                 resetSW1Counter:						;
000077 2777      	clr sw1Counter						;
000078 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 ;///////////////////////////////////////;
                 ;=======================================;
                 ;--------------Check same---------------;
                 ;=======================================;
                 ;///////////////////////////////////////;
                 checkSame:								;
000079 1703      	cp hour,hourAlarm
00007a f009      	breq checkSame2
00007b 9508      	ret									;
                 checkSame2:
00007c 1714      	cp minute, minuteAlarm
00007d f009      	breq checkSame3
00007e 9508      	ret
                 
                 checkSame3:
00007f e081      	ldi temp,1
000080 9508      	ret										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;----------increment second-------------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incSecondTens:
000081 9523      	inc second
000082 9523      	inc second
000083 9523      	inc second
000084 9523      	inc second
000085 9523      	inc second
000086 9523      	inc second
000087 9523      	inc second
000088 9523      	inc second
000089 9523      	inc second
00008a 9523      	inc second
00008b 9523      	inc second
                 
00008c 332d      	cpi second,61
00008d f408      	brsh setZeroSecond 
00008e 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;----------Set Zero Second--------------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 setZeroSecond:
00008f e021      	ldi second,1
000090 9508      	ret	
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;s
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;----------increment second-------------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incSecond:
000091 9523      	inc second
000092 332d      	cpi second,61
000093 f428      	brsh incMinuteNorm 
000094 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;----------increment Minute-------------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incMinute:
000095 9513      	inc minute
000096 331d      	cpi minute,61
000097 f480      	brsh incHourNorm 
000098 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;-------increment Minute Norm-----------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incMinuteNorm:
000099 9513      	inc minute
00009a e021      	ldi second,1
00009b 331d      	cpi minute,61
00009c f458      	brsh incHourNorm 
00009d 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;-------increment Minute Alarm----------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incMinuteAlarm:
00009e 9543      	inc minuteAlarm
00009f 334d      	cpi minuteAlarm,61
0000a0 f408      	brsh incHourAlarmNorm 
0000a1 9508      	ret									;
                 incHourAlarmNorm:
0000a2 e041      	ldi minuteAlarm,1
0000a3 9508      	ret									;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;----------increment Hour-------------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incHour:
0000a4 9503      	inc hour
0000a5 3129      	cpi second,25
0000a6 f450      	brsh incDayNorm 
0000a7 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;-------increment Hour Norm-----------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incHourNorm:
0000a8 9503      	inc hour
0000a9 e011      	ldi minute,1
0000aa 3109      	cpi hour,25
0000ab f428      	brsh incDayNorm 
0000ac 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;------increment HourAlarm Norm---------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incHourAlarm:
0000ad 9533      	inc hourAlarm
0000ae 3109      	cpi hour,25
0000af f418      	brsh incDayAlarmNorm 
0000b0 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 ;***************************************;
                 ;///////////////////////////////////////;
                 ;------------increment Day--------------;
                 ;///////////////////////////////////////;
                 ;***************************************;
                 incDayNorm:
0000b1 e001      	ldi hour,1
0000b2 9508      	ret
                 incDayAlarmNorm:
0000b3 e031      	ldi hourAlarm,1
0000b4 9508      	ret									;
                 										;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 ;##############################################################################;
                 ;==============================================================================;
                 ;---------------------------------Start up-------------------------------------;
                 ;==============================================================================;
                 ;##############################################################################;
                 										;
                 startup:								;
0000b5 d012      	rcall startup1
0000b6 d014      	rcall startup2
0000b7 d016      	rcall startup3
0000b8 d107      	rcall displayNoAlarm
0000b9 9500      	com hour							;
0000ba 9510      	com minute							;
0000bb 9520      	com second							;
0000bc dfa8      	rcall checkIncEditLevel
0000bd 9508      	ret
                 	
                 displayNull2:
0000be 940e 018a 	call displayNull
0000c0 940e 018a 	call displayNull
0000c2 9508      	ret
                 displayZero2:
0000c3 940e 018d 	call displayZero
0000c5 940e 018d 	call displayZero
0000c7 9508      	ret	
                 	
                 	startup1:
0000c8 3f0f      		cpi hour,0xff						;
0000c9 f3a1      		breq displayNull2					;
0000ca f7c1      		brne displayZero2
                 
                 	startup2:
0000cb 3f1f      		cpi minute,0xff						;
0000cc f389      		breq displayNull2					;
0000cd f7a9      		brne displayZero2					;
                 	
                 	startup3:
0000ce 3f2f      		cpi second, 0xff					;
0000cf f371      		breq displayNull2
0000d0 f791      		brne displayZero2					;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;--------------Set Hour-----------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 setHour:
0000d1 d00b      	rcall setHour1
0000d2 dff0      	rcall displayZero2					;
0000d3 dfef      	rcall displayZero2					;
0000d4 d0eb      	rcall displayNoAlarm				;
                 
0000d5 940e 0065 	call checkIncEditLevel				;
0000d7 3061      	cpi	sw0Counter,1					;
0000d8 f410      	brsh incHour2						;
0000d9 df99      	rcall resetSW0Counter				;
0000da 9508      	ret									;
                 	 incHour2:
0000db dfc8      		rcall incHour
0000dc 9508      		ret
                 
                 	setHour1:
                 		
0000dd 3f0f      		cpi hour,0xff					;
0000de f021      		breq displayNullHour2inv		;
0000df 3000      		cpi hour,0x00					;
0000e0 f031      		breq displayZeroHour2inv		;					
0000e1 d0ee      		rcall displayHour				;
0000e2 9508      		ret
                 
                 	displayNullHour2inv:
0000e3 9500      		com hour
0000e4 940e 00c3 		call displayZero2
0000e6 9508      		ret
                 	displayZeroHour2inv:
0000e7 9500      		com hour
0000e8 940e 00c3 		call displayZero2
0000ea 9508      		ret
                 
                 	
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;-------------Set Minute----------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 setMinute:								;
0000eb d0e4      	rcall displayHour					;
0000ec d007      	rcall setMinute1
0000ed dfd5      	rcall displayZero2
0000ee d0d1      	rcall displayNoAlarm
0000ef df75      	rcall checkIncEditLevel
                 
0000f0 3061      	cpi	sw0Counter,1					;
0000f1 f438      	brsh incMinute2						;
0000f2 df80      	rcall resetSW0Counter				;
0000f3 9508      	ret									;
                 
                 	setMinute1:
0000f4 3f1f      		cpi minute,0xff					;
0000f5 f029      		breq displayNullMinute2inv				;
0000f6 3010      		cpi minute,0x00					;
0000f7 f039      		breq displayZeroMinute2inv					;
0000f8 d0da      		rcall displayMinute				;
                 
                 	incMinute2:
0000f9 df9b      		rcall incMinute
0000fa 9508      		ret
                 	
                 	displayNullMinute2inv:
0000fb 9510      		com minute
0000fc 940e 00c3 		call displayZero2
0000fe 9508      		ret
                 	displayZeroMinute2inv:
0000ff 9510      		com minute
000100 940e 00c3 		call displayZero2
000102 9508      		ret
                 	
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;-------------Set second----------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 setSecond:								;
000103 d0cc      	rcall displayHour					;
000104 d0ce      	rcall displayMinute
000105 d006      	rcall setSecond1
000106 d0b9      	rcall displayNoAlarm
                 
000107 df5d      	rcall checkIncEditLevel
000108 3061      	cpi	sw0Counter,1					;
000109 f440      	brsh incSecondTens2					;
00010a df68      	rcall resetSW0Counter				;
00010b 9508      	ret									;
                 
                 	setSecond1:
00010c 3f2f      		cpi second,0xff						;
00010d f031      		breq displayNullSecond2inv		;
00010e 3020      		cpi second,0x00						;
00010f f041      		breq displayZeroSecond2inv			;
000110 d0c5      		rcall displaySecond					;
000111 9508      		ret
                 
                 	
                 	incSecondTens2:
000112 df6e      		rcall incSecondTens
000113 9508      		ret
                 
                 		displayNullSecond2inv:
000114 9520      		com second
000115 940e 00c3 		call displayZero2
000117 9508      		ret
                 	displayZeroSecond2inv:
000118 9520      		com second
000119 940e 00c3 		call displayZero2
00011b 9508      		ret
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;------------setup Alarm----------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 setAlarmStartup:								;
00011c d007      	rcall alarmSetup1
00011d d009      	rcall alarmSetup2
00011e df9f      	rcall displayNull2
00011f d09e      	rcall displayYesAlarm
000120 9530      	com hourAlarm							;
000121 9540      	com minuteAlarm							;
000122 df42      	rcall checkIncEditLevel
000123 9508      	ret
                 	
                 	
                 	alarmSetup1:
000124 3f3f      		cpi hourAlarm,0xff						;
000125 f021      		breq displayNull3					;
000126 f441      		brne displayZero3
                 
                 	Alarmsetup2:
000127 3f4f      		cpi minuteAlarm,0xff						;
000128 f009      		breq displayNull3					;
000129 f429      		brne displayZero3					;
                 
                 		displayNull3:
00012a 940e 018a 			call displayNull
00012c 940e 018a 			call displayNull
00012e 9508      			ret
                 		displayZero3:
00012f 940e 018d 			call displayZero
000131 940e 018d 			call displayZero
000133 9508      			ret	
                 	
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;-----------Set Hour Alarm--------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 setAlarmHour:
000134 d00b      	rcall setAlarmHour1
000135 df8d      	rcall displayZero2					;
000136 df87      	rcall displayNull2					;
000137 d086      	rcall displayYesAlarm				;
                 
000138 940e 0065 	call checkIncEditLevel				;
00013a 3061      	cpi	sw0Counter,1					;
00013b f410      	brsh incHourAlarm2						;
00013c df36      	rcall resetSW0Counter				;
00013d 9508      	ret									;
                 	 incHourAlarm2:
00013e df6e      		rcall incHourAlarm
00013f 9508      		ret
                 
                 	setAlarmHour1:
                 		
000140 3f3f      		cpi hourAlarm,0xff					;
000141 f021      		breq displayNullHourAlarm2inv		;
000142 3030      		cpi hourAlarm,0x00					;
000143 f031      		breq displayZeroHourAlarm2inv		;					
000144 d094      		rcall displayHourAlarm				;
000145 9508      		ret
                 
                 	displayNullHourAlarm2inv:
000146 9530      		com hourAlarm
000147 940e 00c3 		call displayZero2
000149 9508      		ret
                 	displayZeroHourAlarm2inv:
00014a 9530      		com hourAlarm
00014b 940e 00c3 		call displayZero2
00014d 9508      		ret
                 
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;----------Set Minute Alarm-------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 setAlarmMinute:								;
00014e d08a      	rcall displayHourAlarm					;
00014f d007      	rcall setMinuteAlarm1
000150 dfde      	rcall displayZero3
000151 d06c      	rcall displayYesAlarm
000152 df12      	rcall checkIncEditLevel
                 
000153 3061      	cpi	sw0Counter,1					;
000154 f438      	brsh incMinuteAlarm2						;
000155 df1d      	rcall resetSW0Counter				;
000156 9508      	ret									;
                 
                 	setMinuteAlarm1:
000157 3f4f      		cpi minuteAlarm,0xff					;
000158 f029      		breq displayNullMinuteAlarm2inv				;
000159 3040      		cpi minuteAlarm,0x00					;
00015a f039      		breq displayZeroMinuteAlarm2inv					;
00015b d080      		rcall displayMinuteAlarm				;
                 
                 	incMinuteAlarm2:
00015c df41      		rcall incMinuteAlarm
00015d 9508      		ret
                 	
                 	displayNullMinuteAlarm2inv:
00015e 9540      		com minuteAlarm
00015f 940e 00c3 		call displayZero2
000161 9508      		ret
                 	displayZeroMinuteAlarm2inv:
000162 9540      		com minuteAlarm
000163 940e 00c3 		call displayZero2
000165 9508      		ret
                 	
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;------------Play No Alarm--------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 playNoAlarm:							;
000166 cefe      	rjmp checkIncEditLevel				;
000167 3061      	cpi	sw0Counter,1					;
000168 f4e0      	brsh showAlarm						;
000169 f4b9      	brne showTime						;
00016a c055      	rjmp displayNoAlarm					;
00016b 9508      	ret									;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;------------Play Yes Alarm--------------;
                 ;=======================================;
                 ;#######################################;
                 										;
                 playYesAlarm:							;
00016c def8      	rcall checkIncEditLevel				;
00016d d002      	rcall checkDisplay
00016e d004      	rcall checkAlarmSound
00016f 9508      	ret
                 
                 	checkDisplay:
000170 3061      	cpi	sw0Counter,1					;
000171 f498      	brsh showAlarm						;
000172 f471      	brne showTime
                 	
                 	checkAlarmSound:			;				;
000173 e080      	ldi temp,0x00						;
000174 940e 0079 	call checkSame
000176 3080      	cpi temp,0x00
000177 f009      	breq displayYesAlarm2
000178 f419      	brne displayBuzzer2
                 							;
                 displayYesAlarm2:
000179 940e 01be 	call displayYesAlarm
00017b 9508      	ret
                 displayBuzzer2:
00017c 940e 01c4 	call displayBuzzer
00017e 9508      	ret
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;------------Play No Alarm--------------;
                 ;=======================================;
                 ;#######################################;
                 playNoAlarmAgain:
00017f e057      	ldi editLevel,7
000180 9508      	ret
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;--------------Show Time----------------;
                 ;=======================================;
                 ;#######################################;
                 showTime:								;
000181 d04e      	rcall displayHour					;
000182 d050      	rcall displayMinute					;
000183 d052      	rcall displaySecond					;
000184 9508      	ret									;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 ;#######################################;
                 ;=======================================;
                 ;--------------Show Alarm----------------;
                 ;=======================================;
                 ;#######################################;
                 showAlarm:								;
000185 d053      	rcall displayHourAlarm				;
000186 d055      	rcall displayMinuteAlarm				;
000187 d002      	rcall displayNull					;
000188 d001      	rcall displayNull					;
000189 9508      	ret									;
                 ;=======================================;
                 ;--------------END LABEL----------------;
                 ;=======================================;
                 
                 
                 
                 
                 
                 displayNull:
00018a e080      	ldi temp, 0x00
00018b bb82      	out PORTD, temp
00018c 9508      	ret
                 displayZero:
00018d e787      	ldi temp, 0x77
00018e bb82      	out PORTD, temp
00018f 9508      	ret
                 displayOne:
000190 e284      	ldi temp, 0x24
000191 bb82      	out PORTD, temp
000192 9508      	ret
                 displayTwo:
000193 e58d      	ldi temp, 0x5D
000194 bb82      	out PORTD, temp
000195 9508      	ret
                 displayThree:
000196 e68d      	ldi temp, 0x6D
000197 bb82      	out PORTD, temp
000198 9508      	ret
                 displayFour:
000199 e28e      	ldi temp, 0x2E
00019a bb82      	out PORTD, temp
00019b 9508      	ret
                 displayFive:
00019c e68b      	ldi temp, 0x6B
00019d bb82      	out PORTD, temp
00019e 9508      	ret
                 displaySix:
00019f e78b      	ldi temp, 0x7B
0001a0 bb82      	out PORTD, temp
0001a1 9508      	ret
                 displaySeven:
0001a2 e285      	ldi temp, 0x25
0001a3 bb82      	out PORTD, temp
0001a4 9508      	ret
                 displayEight:
0001a5 e78f      	ldi temp, 0x7F
0001a6 bb82      	out PORTD, temp
0001a7 9508      	ret
                 displayNine:
0001a8 e68f      	ldi temp, 0x6F
0001a9 bb82      	out PORTD, temp
0001aa 9508      	ret
                 
                 displayNumber:
0001ab 358d      	cpi temp, 0x5D
0001ac f319      	breq displayOne
                 
0001ad 368d      	cpi temp, 0x6D
0001ae f321      	breq displayTwo
                 
0001af 328e      	cpi temp, 0x2E
0001b0 f329      	breq displayThree
                 
0001b1 368b      	cpi temp, 0x6B
0001b2 f331      	breq displayFour
                 
0001b3 378b      	cpi temp, 0x7B
0001b4 f339      	breq displayFive
                 
0001b5 3285      	cpi temp, 0x25
0001b6 f341      	breq displaySix
                 
0001b7 378f      	cpi temp, 0x7F
0001b8 f349      	breq displaySeven
                 
0001b9 368f      	cpi temp, 0x6F
0001ba f351      	breq displayEight
                 
0001bb 308a      	cpi temp, 0x0A
0001bc f359      	breq displayNine
                 
0001bd 9508      	ret
                 
                 
                 displayYesAlarm:
0001be e087      	ldi temp, 0b00000111
0001bf bb82      	out PORTD, temp
                 displayNoAlarm:
0001c0 e086      	ldi temp, 0b00000110
0001c1 bb82      	out PORTD, temp
                 displayNoPointer:
0001c2 e080      	ldi temp, 0b00000000
0001c3 bb82      	out PORTD, temp
                 displayBuzzer:
0001c4 e08f      	ldi temp, 0b00001111
0001c5 bb82      	out PORTD, temp
                 displayNoPointerAlarm:
0001c6 e081      	ldi temp, 0b00000001
0001c7 bb82      	out PORTD, temp
                 
0001c8 9508      	ret
                 
                 splitByte:
0001c9 308a      	cpi temp, 10
0001ca f404      	brge start_split
                 
                 	start_split:
0001cb 508a      		subi temp, 10
0001cc 9593      		inc temp2
0001cd 940c 01c9 		jmp splitByte
                 	
0001cf 9508      	ret
                 
                 displayHour:
0001d0 2f80      	mov temp, hour
0001d1 cff7      	rjmp splitByte
                 
0001d2 9508      	ret
                 
                 displayMinute:
0001d3 2f81      	mov temp, minute
0001d4 cff4      	rjmp splitByte
                 	
0001d5 9508      	ret
                 
                 displaySecond:
0001d6 2f82      	mov temp, second
0001d7 cff1      	rjmp splitByte
                 	
0001d8 9508      	ret
                 
                 displayHourAlarm:
0001d9 2f83      	mov temp, hourAlarm
0001da cfee      	rjmp splitByte
                 
0001db 9508      	ret
                 
                 displayMinuteAlarm:
0001dc 2f84      	mov temp, minuteAlarm
0001dd cfeb      	rjmp splitByte
                 	
0001de 9508      	ret
                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   2 r13:   0 r14:   0 r15:   0 
r16:  14 r17:  14 r18:  25 r19:  11 r20:  12 r21:  14 r22:  11 r23:   6 
r24:  75 r25:   1 r26:   0 r27:   0 r28:   0 r29:   0 r30:   0 r31:   0 
x  :   0 y  :   0 z  :   0 
Registers used: 11 out of 35 (31.4%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  39 brge  :   1 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   9 brpl  :   0 brsh  :  18 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  23 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   4 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :  15 cp    :   2 cpc   :   0 
cpi   :  55 cpse  :   0 dec   :   0 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :  22 jmp   :   3 
ld    :   0 ldd   :   0 ldi   :  43 lds   :   0 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   5 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  29 pop   :   0 
push  :   0 rcall :  70 ret   :  87 reti  :   1 rjmp  :  10 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   1 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   0 subi  :   1 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 22 out of 113 (19.5%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003be    932      0    932   32768   2.8%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
